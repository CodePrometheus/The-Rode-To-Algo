/**
 * 01背包：每个物品，选或不选
 * <p>
 * 状态表示 f[i, j]
 * - 集合：所有只从前i个物品中选，且总体积不超过j的选法的集合
 * - 属性：max
 * <p>
 * 状态计算：f[i][j]=max(f[i-1][j],f[i-1][j-W[i]]+V[i])(j>=W[i])
 * -选择 第i个物品的所有方案 f[i-1, j]
 * -不选 第i个物品的所有方案 f[i-1, j-Vi] + Wi
 * <p>
 * 完全背包：01背包同个物品只能选1个,完全背包同个物品可以选大于等于0个
 * 状态计算：f[i, j] = max(f[i-1, j], f[i, j-v] + w)
 * <p>
 * 多重背包：每个物品，选0...n个
 */
package com.star.dp.knapsackproblem;
